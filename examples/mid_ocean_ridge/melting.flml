<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">standard_case</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="c_mesh">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">3.156e13</real_value>
      </constant>
    </dump_period>
    <output_mesh name="CoordinateMesh"/>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
  </io>
  <particles>
    <particle_group name="melting">
      <particle_io>
        <dump_period>
          <constant>
            <real_value rank="0">3.156e13</real_value>
          </constant>
        </dump_period>
      </particle_io>
      <particle_subgroup name="melt_fraction_and_chemistry">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
    from numpy.random import default_rng
    from constants import domain_dim

    num_particles = 1e4
    initial_particle_width = 350e3
    initial_particle_height = 250e3  # Above starting particle_height
    starting_particle_height = 320e3
    return (default_rng(0).random((int(num_particles), 2))
            * (initial_particle_width, initial_particle_height)
            + (domain_dim[0] / 2 - initial_particle_width / 2,
               starting_particle_height))</string_value>
          </python>
        </initial_position>
        <attributes>
          <scalar_attribute_array name="katz_mckenzie_bdd21_">
            <dimension>
              <integer_value rank="0">41</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X, t, dt, fields, n):
    from numba import float64
    from numba.typed import Dict
    from numba.types import unicode_type
    from numpy import array, clip, ones, zeros_like
    from scipy.constants import g

    from Melt import Katz
    from MeltChemistryFunctions import calc_X_spl_in_gnt_out, run_integrator
    from constants import (adiab_grad, cs_0, domain_dim, gnt_out, melt_inputs,
                           rho_mantle, spl_in)

    depth = clip(domain_dim[1] - X[1], 0, domain_dim[1])
    presGPa = rho_mantle * g * depth / 1e9
    temp = fields['Temperature'] + adiab_grad * depth
    dTdP_GPa = adiab_grad / rho_mantle / g * 1e9

    if t == 0:
        F = Katz().KatzPT(presGPa, temp, inputConst=melt_inputs)
        assert F == 0

        return (F, F, 0, presGPa, temp, 0,
                *ones(cs_0.size, dtype=bool), 1e-6, 1 if depth &gt; spl_in else 0,
                1 if depth &gt; gnt_out else 0, F, presGPa, *[0, 0, 0, 0, 0, 0],
                *[0, 0, 0, 0, 0, 0], *cs_0, *zeros_like(cs_0))

    old_attrs = fields['old%katz_mckenzie_bdd21_']

    temp_grad = (temp - old_attrs[4]) / (presGPa - old_attrs[3])
    sol = Katz().KatzPTF(old_attrs[3], presGPa, old_attrs[4], old_attrs[0],
                         temp_grad, inputConst=melt_inputs)
    T, F = sol(presGPa)
    F = 0 if F &lt; 0 else F
    if F &gt; old_attrs[1]:
        melt_rate = (F - old_attrs[1]) / dt * 8.64e4 * 365.25 * 1e6
        temp_src = (T - temp) / dt
    else:
        return (F, old_attrs[1], 0, presGPa, temp, 0,
                *old_attrs[6:-6 - 2 * cs_0.size], *[0, 0, 0, 0, 0, 0],
                *old_attrs[-2 * cs_0.size:-cs_0.size], *zeros_like(cs_0))

    part_arr = Dict.empty(key_type=unicode_type, value_type=float64[:])
    part_arr["melt_fraction"] = array([old_attrs[1], F])
    part_arr["pressure"] = array([old_attrs[3], presGPa])
    part_arr["temperature"] = array([old_attrs[4], T])

    mask_ode = array(old_attrs[6:6 + cs_0.size], dtype=bool)
    if not mask_ode.any():
        return F, F, melt_rate, presGPa, T, temp_src, *old_attrs[6:]

    ode_dX, X_spl_in, X_gnt_out = old_attrs[6 + cs_0.size:9 + cs_0.size]
    if F / melt_rate &lt; 3 and (old_attrs[2] &gt; 0 or old_attrs[1] == 0):
        X_0, P_0 = old_attrs[1], old_attrs[3]
    else:
        X_0, P_0 = old_attrs[9 + cs_0.size:11 + cs_0.size]

    pn_old = array(old_attrs[17 + cs_0.size:23 + cs_0.size])
    cs_old = array(old_attrs[23 + cs_0.size:23 + 2 * cs_0.size])

    old_depth = old_attrs[3] * 1e9 / rho_mantle / g
    X_spl_in, X_gnt_out = calc_X_spl_in_gnt_out(
        X_spl_in, X_gnt_out, old_depth, depth, part_arr, dTdP_GPa, rho_mantle)

    mask_ode, ode_dX, Fn, pn, cs, cl = run_integrator(
        part_arr, mask_ode, ode_dX, X_spl_in, X_gnt_out, X_0, P_0,
        pn_old, cs_old)

    return (F, F, melt_rate, presGPa, T, temp_src,
            *mask_ode, ode_dX, X_spl_in, X_gnt_out, X_0, P_0, *Fn, *pn,
            *cs, *cl)</string_value>
              <store_old_attribute/>
            </python_fields>
          </scalar_attribute_array>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <moving_outside_domain>
      <delete_outside_domain/>
    </moving_outside_domain>
    <lagrangian_timestepping>
      <subcycles>
        <integer_value rank="0">3</integer_value>
      </subcycles>
      <search_tolerance>
        <real_value rank="0">1.0e-12</real_value>
      </search_tolerance>
      <rk4_guided_search/>
    </lagrangian_timestepping>
  </particles>
  <timestepping>
    <current_time>
      <real_value rank="0">0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1e12</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">6.312e14</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">3</real_value>
      </requested_cfl>
      <courant_number name="ControlVolumeCFLNumber">
        <mesh name="CoordinateMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">1.1</real_value>
      </increase_tolerance>
    </adaptive_timestep>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value rank="1" dim1="dim" shape="2">0 -1</real_value>
            </constant>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <particles>
            <exclude_from_particles/>
          </particles>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Ambient">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">3300</real_value>
          </reference_density>
          <temperature_dependency>
            <reference_temperature>
              <real_value rank="0">273</real_value>
            </reference_temperature>
            <thermal_expansion_coefficient>
              <real_value rank="0">3e-5</real_value>
            </thermal_expansion_coefficient>
          </temperature_dependency>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
            <integrate_continuity_by_parts/>
            <test_continuity_with_cv_dual/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix"/>
              <preconditioner_matrix name="ScaledPressureMassMatrix"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="ksp">
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-7</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1e-6</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="gamg"/>
          <relative_error>
            <real_value rank="0">4e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <multigrid_near_null_space>
            <all_components/>
            <all_rotations/>
          </multigrid_near_null_space>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">0 0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="TopRight">
          <surface_ids>
            <integer_value rank="1" shape="1">3</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X, t):
    from constants import vel_x
    return vel_x</string_value>
                </python>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="TopLeft">
          <surface_ids>
            <integer_value rank="1" shape="1">4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X, t):
    from constants import vel_x
    return -vel_x</string_value>
                </python>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Bottom">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Sides">
          <surface_ids>
            <integer_value rank="1" shape="2">2 5</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <y_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <mesh name="CoordinateMesh"/>
            <algorithm name="tensor_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">from numpy import ones
from constants import mu_max, mu_min

Mu_diff = state.scalar_fields["ViscosityDiffusionCreep"]
Mu_disl = state.scalar_fields["ViscosityDislocationCreep"]

assert Mu_diff.node_count == field.node_count
assert Mu_disl.node_count == field.node_count

for i in range(field.node_count):
    visc = ones((2, 2))
    mu_diff = min(1e30, Mu_diff.node_val(i))
    mu_disl = min(1e30, Mu_disl.node_val(i))
    mu = (1 / mu_diff + 1 / mu_disl) ** -1
    visc *= max(min(mu, mu_max), mu_min)
    field.set(i, visc)</string_value>
              <depends>
                <string_value lines="1">Temperature, ViscosityDiffusionCreep, ViscosityDislocationCreep</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <vector_field rank="1" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X, t):
    if t == 0:
        return 1, 1
    elif X[1] &gt; 6.5e5:
        return 5e-11, 5e-11
    elif X[1] &lt; 6.1e5:
        return 5e-13, 5e-13
    else:
        value = 299.7615 ** (3.9821e-10 * X[1] ** 2 + -4.8155e-4 * X[1] + 140.6077)
        return value, value</string_value>
                  </python>
                </value>
                <output/>
                <stat>
                  <include_in_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </vector_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="Temperature">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <mass_terms/>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Ultimate">
                  <courant_number name="ControlVolumeCFLNumber"/>
                  <project_upwind_value_from_point>
                    <bound_projected_value_locally/>
                    <store_upwind_elements>
                      <store_upwind_quadrature/>
                    </store_upwind_elements>
                  </project_upwind_value_from_point>
                </limiter>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <control_volumes>
            <maximum_courant_number_per_subcycle>
              <real_value rank="0">0.5</real_value>
              <courant_number name="ControlVolumeCFLNumber"/>
            </maximum_courant_number_per_subcycle>
          </control_volumes>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X, t):
    from numpy import clip, sqrt
    from scipy.special import erf
    from constants import domain_dim, kappa, T_mantle, T_surface, vel_x

    return (T_surface + (T_mantle - T_surface)
            * erf(clip(domain_dim[1] - X[1], 0, domain_dim[1]) / 2
                  / sqrt(kappa * (abs(domain_dim[0] / 2 - X[0]) + 1e3) / vel_x)))</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="Top">
          <surface_ids>
            <integer_value rank="1" shape="2">3 4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X, t):
    from constants import T_surface
    return T_surface</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Bottom">
          <surface_ids>
            <integer_value rank="1" shape="1">1</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X, t):
    from constants import T_mantle
    return T_mantle</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Sides">
          <surface_ids>
            <integer_value rank="1" shape="2">2 5</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X, t):
    from numpy import clip, sqrt
    from scipy.special import erf
    from constants import domain_dim, kappa, T_mantle, T_surface, vel_x

    return (T_surface + (T_mantle - T_surface)
            * erf(clip(domain_dim[1] - X[1], 0, domain_dim[1]) / 2
                  / sqrt(kappa * (abs(domain_dim[0] / 2 - X[0]) + 1e3) / vel_x)))</string_value>
            </python>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X, t):
    from constants import kappa
    return kappa</string_value>
                </python>
              </isotropic>
            </value>
            <output>
              <exclude_from_vtu/>
            </output>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="scalar_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">LH = state.scalar_fields['Latent_Heating']
assert LH.node_count == field.node_count

for n in range(field.node_count):
    field.set(n, LH.node_val(n))</string_value>
              <depends>
                <string_value lines="1">Latent_Heating</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <include_in_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X, t):
    if X[1] &lt; 6.5e5 or abs(X[0] - 9.9e5) &gt; 3e4:
        return 6
    elif X[1] &gt; 6.55e5 and abs(X[0] - 9.9e5) &lt; 5e3:
        return 80
    elif abs(X[0] - 9.9e5) &lt; 5e3:
        return 30
    else:
        return 15 + (6 - 15) / 25e3 * (abs(X[0] - 9.9e5) - 5e3)</string_value>
                  </python>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="GeostrophicPressure">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <spatial_discretisation>
          <geostrophic_pressure_option>
            <string_value>exclude_coriolis</string_value>
          </geostrophic_pressure_option>
        </spatial_discretisation>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="ksp">
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1e-10</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1e-7</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Latent_Heating">
      <diagnostic>
        <algorithm name="from_particles" material_phase_support="multiple">
          <particle_group name="melting">
            <particle_attribute_array name="katz_mckenzie_bdd21_">
              <attribute_index>
                <integer_value rank="0">6</integer_value>
              </attribute_index>
            </particle_attribute_array>
          </particle_group>
          <interpolation>
            <weighted_distance/>
          </interpolation>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <constant>
                    <real_value rank="0">1e-12</real_value>
                  </constant>
                </value>
                <output/>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ViscosityDiffusionCreep">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">from numpy import clip, exp
from scipy.constants import g, R
from constants import (Adiff_UM, alpha, c_P, domain_dim, Ediff_UM, rho_mantle,
                       T_mantle, Vdiff_UM)

T = state.scalar_fields["Temperature"]
X = state.vector_fields["Coordinate"]

assert T.node_count == field.node_count
assert X.node_count == field.node_count

for i in range(field.node_count):
    z = clip(domain_dim[1] - X.node_val(i)[1], 0, domain_dim[1])
    temp = T.node_val(i) + alpha * T_mantle * g / c_P * z
    mu_diff = Adiff_UM ** -1 * exp((Ediff_UM + rho_mantle * g * z * Vdiff_UM)
                                   / R / temp)
    field.set(i, mu_diff)</string_value>
          <depends>
            <string_value lines="1">Temperature</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ViscosityDislocationCreep">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">from numpy import clip, exp
from scipy.constants import g, R
from constants import (Adisl_UM, alpha, c_P, domain_dim, Edisl_UM, n,
                       rho_mantle, T_mantle, Vdisl_UM)

T = state.scalar_fields["Temperature"]
X = state.vector_fields["Coordinate"]
S = state.scalar_fields["StrainRateSecondInvariant"]

assert T.node_count == field.node_count
assert S.node_count == field.node_count
assert X.node_count == field.node_count

for i in range(field.node_count):
    z = clip(domain_dim[1] - X.node_val(i)[1], 0, domain_dim[1])
    temp = T.node_val(i) + alpha * T_mantle * g / c_P * z
    epsilon_dot = max(1e-25, S.node_val(i))
    mu_disl = (Adisl_UM ** (-1 / n) * epsilon_dot ** ((1 - n) / n)
               * exp((Edisl_UM + rho_mantle * g * z * Vdisl_UM)
                     / n / R / temp))
    field.set(i, mu_disl)</string_value>
          <depends>
            <string_value lines="1">Temperature,  StrainRateSecondInvariant</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="DeformationMechanism">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">from constants import mu_max, mu_min

Mu_diff = state.scalar_fields["ViscosityDiffusionCreep"]
Mu_disl = state.scalar_fields["ViscosityDislocationCreep"]

assert Mu_diff.node_count == field.node_count
assert Mu_disl.node_count == field.node_count

for i in range(field.node_count):
    mu_diff = min(1e30, Mu_diff.node_val(i))
    mu_disl = min(1e30, Mu_disl.node_val(i))
    mu = (1 / mu_diff + 1 / mu_disl) ** -1
    if mu &gt;= mu_max:
        min_mu = 3
    elif mu &lt;= mu_min:
        min_mu = 2
    elif mu_disl &lt; mu_diff:
        min_mu = 1
    else:
        min_mu = 0
    field.set(i, min_mu)</string_value>
          <depends>
            <string_value lines="1">ViscosityDiffusionCreep, ViscosityDislocationCreep</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="StrainRateSecondInvariant">
      <diagnostic>
        <algorithm name="strain_rate_second_invariant" material_phase_support="single "/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period_in_timesteps>
        <integer_value rank="0">8</integer_value>
      </period_in_timesteps>
      <maximum_number_of_nodes>
        <integer_value rank="0">10000000</integer_value>
      </maximum_number_of_nodes>
      <enable_gradation>
        <gradation_parameter>
          <real_value rank="0">1.2</real_value>
        </gradation_parameter>
      </enable_gradation>
      <metric_advection>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FirstOrderUpwind"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0</real_value>
          </theta>
          <maximum_courant_number_per_subcycle>
            <real_value rank="0">0.5</real_value>
            <courant_number name="ControlVolumeCFLNumber"/>
          </maximum_courant_number_per_subcycle>
          <scale_advection_time>
            <real_value rank="0">2</real_value>
          </scale_advection_time>
          <control_volumes/>
        </temporal_discretisation>
        <explicit/>
        <output/>
      </metric_advection>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <python>
            <string_value type="code" language="python" lines="20">def val(X, t):
    from numpy import identity, sqrt

    dist2ridge = sqrt((X[0] - 9.9e5) ** 2 + (X[1] - 6.6e5) ** 2)

    if dist2ridge &lt;= 2.5e5:
        return (dist2ridge / 2.5e5 * 4.7e3 + 3e2) * identity(2)
    elif dist2ridge &lt;= 7e5 or X[1] &gt; 6e5:
        return 5e3 * identity(2)
    elif dist2ridge &lt;= 9e5:
        return ((dist2ridge - 7e5) / 2e5 * 3e3 + 5e3) * identity(2)
    else:
        return 8e3 * identity(2)</string_value>
          </python>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="2 2">1e5 0 0 1e5</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <aspect_ratio_bound>
        <real_value rank="0">10</real_value>
      </aspect_ratio_bound>
      <adapt_at_first_timestep>
        <number_of_adapts>
          <integer_value rank="0">3</integer_value>
        </number_of_adapts>
      </adapt_at_first_timestep>
      <zoltan_options>
        <partitioner>
          <scotch/>
        </partitioner>
        <final_partitioner>
          <scotch/>
        </final_partitioner>
        <load_balancing_approach>
          <partition/>
        </load_balancing_approach>
        <element_quality_cutoff>
          <real_value rank="0">0.6</real_value>
        </element_quality_cutoff>
        <load_imbalance_tolerance>
          <real_value rank="0">1.25</real_value>
        </load_imbalance_tolerance>
        <additional_adapt_iterations>
          <integer_value rank="0">25</integer_value>
        </additional_adapt_iterations>
      </zoltan_options>
      <adaptivity_library>
        <libmba2d>
          <quality>
            <real_value rank="0">0.6</real_value>
          </quality>
        </libmba2d>
      </adaptivity_library>
      <adapt_iterations>
        <integer_value rank="0">5</integer_value>
      </adapt_iterations>
    </hr_adaptivity>
  </mesh_adaptivity>
  <flredecomp>
    <final_partitioner>
      <scotch/>
    </final_partitioner>
  </flredecomp>
</fluidity_options>
