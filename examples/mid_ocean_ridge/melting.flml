<?xml version='1.0' encoding='utf-8'?>
<fluidity_options>
  <simulation_name>
    <string_value lines="1">standard_case</string_value>
  </simulation_name>
  <problem_type>
    <string_value lines="1">stokes</string_value>
  </problem_type>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="CoordinateMesh">
      <from_file file_name="mesh/c_mesh">
        <format name="gmsh"/>
        <stat>
          <include_in_stat/>
        </stat>
      </from_file>
    </mesh>
    <mesh name="VelocityMesh">
      <from_mesh>
        <mesh name="CoordinateMesh"/>
        <mesh_shape>
          <polynomial_degree>
            <integer_value rank="0">2</integer_value>
          </polynomial_degree>
        </mesh_shape>
        <stat>
          <include_in_stat/>
        </stat>
      </from_mesh>
    </mesh>
    <quadrature>
      <degree>
        <integer_value rank="0">5</integer_value>
      </degree>
    </quadrature>
  </geometry>
  <io>
    <dump_format>
      <string_value>vtk</string_value>
    </dump_format>
    <dump_period>
      <constant>
        <real_value rank="0">3.156e13</real_value>
      </constant>
    </dump_period>
    <max_dump_file_count>
      <integer_value rank="0">2000</integer_value>
    </max_dump_file_count>
    <output_mesh name="CoordinateMesh"/>
    <checkpointing>
      <checkpoint_period_in_dumps>
        <integer_value rank="0">10</integer_value>
      </checkpoint_period_in_dumps>
      <checkpoint_at_end/>
    </checkpointing>
    <stat>
      <output_at_start/>
      <output_before_adapts/>
      <output_after_adapts/>
    </stat>
  </io>
  <particles>
    <particle_group name="Melt">
      <particle_io>
        <dump_period>
          <constant>
            <real_value rank="0">3.156e13</real_value>
          </constant>
        </dump_period>
      </particle_io>
      <particle_subgroup name="SubMelt">
        <initial_position>
          <python>
            <string_value type="code" language="python" lines="20">def val(t):
  from numpy.random import default_rng
  from constants import domain_dim
  num_particles = 1e4
  initial_particle_width = 350e3
  initial_particle_height = 200e3 # Remember this is above starting particle_height
  starting_particle_height = 370e3
  return default_rng(0).random((int(num_particles), 2)) * (initial_particle_width, initial_particle_height) + (domain_dim[0] * 0.5 - (initial_particle_width*0.5), starting_particle_height)</string_value>
          </python>
        </initial_position>
        <attributes>
          <scalar_attribute_array name="Katz">
            <dimension>
              <integer_value rank="0">6</integer_value>
            </dimension>
            <python_fields>
              <string_value type="code" language="python" lines="20">def val(X, t, dt, fields, n):
    from numpy import clip

    from constants import (alpha, beta2, B1, Cp, DH2O, domain_dim, g, rho0,
                           melt_entropy, mod_cpx, r0, r1, Tm, XH2Obulk)
    from Melt import Katz

    depth = clip(domain_dim[1] - X[1], 0, domain_dim[1])
    presGPa = rho0 * g * depth / 1e9  # Pressure
    adGra = alpha * Tm * g / Cp  # Adiabatic gradient
    temp = fields['Temperature'] + adGra * depth

    if t == 0:
        F = Katz().KatzPT(presGPa, temp,
                          inputConst={'X_H2O_bulk': XH2Obulk, 'D_H2O': DH2O,
                                      'M_cpx': mod_cpx, 'r0': r0, 'r1': r1,
                                      'B1': B1, 'beta2': beta2})
        return (F, F, 0, presGPa, temp, 0)

    sol = Katz().KatzPTF(
        fields['old%Katz'][3], presGPa, fields['old%Katz'][4],
        fields['old%Katz'][0], (temp - fields['old%Katz'][4])
        / (presGPa - fields['old%Katz'][3]),
        inputConst={'X_H2O_bulk': XH2Obulk, 'D_H2O': DH2O, 'M_cpx': mod_cpx,
                    'r0': r0, 'r1': r1, 'B1': B1, 'beta2': beta2, 'c_P': Cp,
                    'alpha_s': alpha, 'deltaS': melt_entropy, 'rho_s': rho0})

    T, F = sol(presGPa)
    F = 0 if F &lt; 0 else F
    if F &gt; fields['old%Katz'][1]:
        mRate = (F - fields['old%Katz'][1]) / dt * 8.64e4 * 365.25 * 1e6
        tempSource = (T - temp) / dt
        return (F, F, mRate, presGPa, T, tempSource)
    else:
        return (F, fields['old%Katz'][1], 0, presGPa, temp, 0)</string_value>
              <store_old_attribute/>
            </python_fields>
          </scalar_attribute_array>
        </attributes>
      </particle_subgroup>
    </particle_group>
    <moving_outside_domain>
      <delete_outside_domain/>
    </moving_outside_domain>
    <lagrangian_timestepping>
      <subcycles>
        <integer_value rank="0">3</integer_value>
      </subcycles>
      <search_tolerance>
        <real_value rank="0">1.0e-12</real_value>
      </search_tolerance>
      <rk4_guided_search/>
    </lagrangian_timestepping>
  </particles>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <timestep>
      <real_value rank="0">1.0e12</real_value>
    </timestep>
    <finish_time>
      <real_value rank="0">6.32e14</real_value>
    </finish_time>
    <adaptive_timestep>
      <requested_cfl>
        <real_value rank="0">0.5</real_value>
      </requested_cfl>
      <courant_number name="ControlVolumeCFLNumber">
        <mesh name="CoordinateMesh"/>
      </courant_number>
      <increase_tolerance>
        <real_value rank="0">1.1</real_value>
      </increase_tolerance>
    </adaptive_timestep>
    <steady_state>
      <tolerance>
        <real_value rank="0">1.0e-7</real_value>
        <infinity_norm/>
      </tolerance>
    </steady_state>
  </timestepping>
  <physical_parameters>
    <gravity>
      <magnitude>
        <real_value rank="0">9.81</real_value>
      </magnitude>
      <vector_field name="GravityDirection" rank="1">
        <prescribed>
          <mesh name="CoordinateMesh"/>
          <value name="WholeMesh">
            <constant>
              <real_value rank="1" dim1="dim" shape="2">0.0 -1.0</real_value>
            </constant>
          </value>
          <output>
            <exclude_from_vtu/>
          </output>
          <stat>
            <exclude_from_stat/>
          </stat>
          <detectors>
            <exclude_from_detectors/>
          </detectors>
          <particles>
            <exclude_from_particles/>
          </particles>
        </prescribed>
      </vector_field>
    </gravity>
  </physical_parameters>
  <material_phase name="Ambient">
    <equation_of_state>
      <fluids>
        <linear>
          <reference_density>
            <real_value rank="0">3300.</real_value>
          </reference_density>
          <temperature_dependency>
            <reference_temperature>
              <real_value rank="0">273.</real_value>
            </reference_temperature>
            <thermal_expansion_coefficient>
              <real_value rank="0">3.0e-5</real_value>
            </thermal_expansion_coefficient>
          </temperature_dependency>
          <subtract_out_hydrostatic_level/>
        </linear>
      </fluids>
    </equation_of_state>
    <scalar_field rank="0" name="Pressure">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <remove_stabilisation_term/>
          </continuous_galerkin>
        </spatial_discretisation>
        <scheme>
          <poisson_pressure_solution>
            <string_value lines="1">never</string_value>
          </poisson_pressure_solution>
          <use_projection_method>
            <full_schur_complement>
              <inner_matrix name="FullMomentumMatrix"/>
              <preconditioner_matrix name="ScaledPressureMassMatrix"/>
            </full_schur_complement>
          </use_projection_method>
        </scheme>
        <solver>
          <iterative_method name="fgmres"/>
          <preconditioner name="ksp">
            <solver>
              <iterative_method name="cg"/>
              <preconditioner name="sor"/>
              <relative_error>
                <real_value rank="0">1.0e-5</real_value>
              </relative_error>
              <max_iterations>
                <integer_value rank="0">1000</integer_value>
              </max_iterations>
              <never_ignore_solver_failures/>
              <diagnostics>
                <monitors/>
              </diagnostics>
            </solver>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-3</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Density">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="Velocity">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <equation name="LinearMomentum"/>
        <spatial_discretisation>
          <continuous_galerkin>
            <stabilisation>
              <no_stabilisation/>
            </stabilisation>
            <mass_terms>
              <exclude_mass_terms/>
            </mass_terms>
            <advection_terms>
              <exclude_advection_terms/>
            </advection_terms>
            <stress_terms>
              <partial_stress_form/>
            </stress_terms>
            <buoyancy/>
          </continuous_galerkin>
          <conservative_advection>
            <real_value rank="0">1.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">1.0</real_value>
          </theta>
          <relaxation>
            <real_value rank="0">1.0</real_value>
          </relaxation>
        </temporal_discretisation>
        <solver>
          <iterative_method name="cg"/>
          <preconditioner name="gamg"/>
          <relative_error>
            <real_value rank="0">5.0e-5</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <multigrid_near_null_space>
            <all_components/>
            <all_rotations/>
          </multigrid_near_null_space>
          <never_ignore_solver_failures/>
          <cache_solver_context/>
          <diagnostics>
            <print_norms/>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <constant>
            <real_value rank="1" dim1="dim" shape="2">0.0 0.0</real_value>
          </constant>
        </initial_condition>
        <boundary_conditions name="TopRight">
          <surface_ids>
            <integer_value rank="1" shape="1">7</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import Vx, domain_dim
  return Vx</string_value>
                </python>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Couette">
          <surface_ids>
            <integer_value rank="1" shape="2">6 9</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import Vx, domain_dim
  weight_quadratic = abs(660e3-X[1])/660e3 
  if(X[0] &lt;= domain_dim[0]/2.):
    return -Vx*(1.-weight_quadratic)**4
  else:
    return Vx*(1.-weight_quadratic)**4</string_value>
                </python>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="TopLeft">
          <surface_ids>
            <integer_value rank="1" shape="1">8</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import Vx, domain_dim
  return -Vx</string_value>
                </python>
              </x_component>
              <y_component>
                <constant>
                  <real_value rank="0">0.0</real_value>
                </constant>
              </y_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Bottom">
          <surface_ids>
            <integer_value rank="1" shape="5">1 2 3 4 5</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <align_bc_with_cartesian>
              <x_component>
                <constant>
                  <real_value rank="0">0</real_value>
                </constant>
              </x_component>
            </align_bc_with_cartesian>
          </type>
        </boundary_conditions>
        <tensor_field name="Viscosity" rank="2">
          <diagnostic>
            <mesh name="CoordinateMesh"/>
            <algorithm name="tensor_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">import numpy
import math
import constants

Mu_diff = state.scalar_fields["ViscosityDiffusionCreep"]
Mu_disl = state.scalar_fields["ViscosityDislocationCreep"]

assert(Mu_diff.node_count == field.node_count)
assert(Mu_disl.node_count == field.node_count)

mu_max = constants.mu_max
mu_min = constants.mu_min

visc = numpy.zeros((2,2))

for i in range(field.node_count):
        mu_diff = min(1e30,Mu_diff.node_val(i)) 
        mu_disl = min(1e30,Mu_disl.node_val(i))
        mu      = (1.0/mu_diff+1.0/mu_disl)**(-1.0)
        mu      = min(mu,mu_max)
        mu      = max(mu,mu_min)
        visc[:,:] = mu
        field.set(i,visc)</string_value>
              <depends>
                <string_value lines="1">Temperature</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat>
              <include_in_stat/>
            </stat>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </tensor_field>
        <output/>
        <stat>
          <include_in_stat/>
          <previous_time_step>
            <exclude_from_stat/>
          </previous_time_step>
          <nonlinear_field>
            <exclude_from_stat/>
          </nonlinear_field>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <vector_field rank="1" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X, t):
    if X[1] &gt; 6.4e5:
        return (6e-10, 6e-10)
    elif X[1] &gt; 6.1e5:
        return (6e-11, 6e-11)
    else:
        return (4e-12, 4e-12)</string_value>
                  </python>
                </value>
                <output/>
                <stat>
                  <include_in_stat/>
                </stat>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </vector_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </vector_field>
    <scalar_field rank="0" name="Temperature">
      <prognostic>
        <mesh name="CoordinateMesh"/>
        <equation name="AdvectionDiffusion"/>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FiniteElement">
              <limit_face_value>
                <limiter name="Sweby">
                  <slopes/>
                  <project_upwind_value_from_point>
                    <bound_projected_value_locally/>
                    <store_upwind_elements>
                      <store_upwind_quadrature/>
                    </store_upwind_elements>
                  </project_upwind_value_from_point>
                </limiter>
              </limit_face_value>
            </face_value>
            <diffusion_scheme name="ElementGradient"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.5</real_value>
          </theta>
          <control_volumes>
            <number_advection_iterations>
              <integer_value rank="0">3</integer_value>
            </number_advection_iterations>
          </control_volumes>
        </temporal_discretisation>
        <solver>
          <iterative_method name="gmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
          </iterative_method>
          <preconditioner name="sor"/>
          <relative_error>
            <real_value rank="0">1e-05</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <never_ignore_solver_failures/>
          <diagnostics>
            <print_norms/>
            <monitors/>
          </diagnostics>
        </solver>
        <initial_condition name="WholeMesh">
          <python>
            <string_value type="code" language="python" lines="20">def val(X, t):

  import math, numpy, constants
  
  T_mantle = constants.Tm
  T_surface = constants.T_surf
  u = constants.Vx
  delta_x = constants.delta_x
  kappa = constants.kappa
  box_width = constants.box_width
  box_depth = constants.box_depth
  
  T = T_surface + (T_mantle-T_surface)*math.erf((box_depth-X[1])/(2*(kappa*(abs((box_width/2.) - X[0])+delta_x)/u)**0.5))
  
  return T</string_value>
          </python>
        </initial_condition>
        <boundary_conditions name="Plume">
          <surface_ids>
            <integer_value rank="1" shape="3">2 3 4</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import Tm
  return Tm</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="ColdTop">
          <surface_ids>
            <integer_value rank="1" shape="2">7 8</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import T_surf
  return T_surf</string_value>
            </python>
          </type>
        </boundary_conditions>
        <boundary_conditions name="Mantle_Base">
          <surface_ids>
            <integer_value rank="1" shape="2">1 5</integer_value>
          </surface_ids>
          <type name="dirichlet">
            <python>
              <string_value type="code" language="python" lines="20">def val(X,t):
  from constants import Tm
  return Tm</string_value>
            </python>
          </type>
        </boundary_conditions>
        <tensor_field name="Diffusivity" rank="2">
          <prescribed>
            <value name="WholeMesh">
              <isotropic>
                <python>
                  <string_value type="code" language="python" lines="20">def val(X,t):
  import constants
  kappa = constants.kappa
  return kappa</string_value>
                </python>
              </isotropic>
            </value>
            <output>
              <exclude_from_vtu/>
            </output>
            <particles>
              <exclude_from_particles/>
            </particles>
          </prescribed>
        </tensor_field>
        <scalar_field name="Source" rank="0">
          <diagnostic>
            <algorithm name="scalar_python_diagnostic" material_phase_support="single">
              <string_value type="code" language="python" lines="20">LH = state.scalar_fields['Latent_Heating']
assert(LH.node_count == field.node_count)

for n in range(field.node_count):
  field.set(n, LH.node_val(n))</string_value>
              <depends>
                <string_value lines="1">Latent_Heating</string_value>
              </depends>
            </algorithm>
            <output/>
            <stat/>
            <detectors>
              <include_in_detectors/>
            </detectors>
            <particles>
              <exclude_from_particles/>
            </particles>
          </diagnostic>
        </scalar_field>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <include_in_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <adaptivity_options>
          <absolute_measure>
            <scalar_field rank="0" name="InterpolationErrorBound">
              <prescribed>
                <value name="WholeMesh">
                  <python>
                    <string_value type="code" language="python" lines="20">def val(X, t):
    if X[1] &gt; 6.5e5 and abs(X[0] - 9.9e5) &lt; 2e4:
        return 200
    elif X[1] &gt; 6.5e5 and abs(X[0] - 9.9e5) &lt; 5e4:
        return 40
    elif X[1] &gt; 6.5e5 and abs(X[0] - 9.9e5) &lt; 1e5:
        return 20
    elif X[1] &gt; 6.3e5:
        return 10
    else:
        return 2</string_value>
                  </python>
                </value>
                <output>
                  <exclude_from_vtu/>
                </output>
                <stat/>
                <detectors>
                  <exclude_from_detectors/>
                </detectors>
                <particles>
                  <exclude_from_particles/>
                </particles>
              </prescribed>
            </scalar_field>
          </absolute_measure>
        </adaptivity_options>
        <consistent_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="GeostrophicPressure">
      <prognostic>
        <mesh name="VelocityMesh"/>
        <spatial_discretisation>
          <geostrophic_pressure_option>
            <string_value>exclude_coriolis</string_value>
          </geostrophic_pressure_option>
        </spatial_discretisation>
        <solver>
          <iterative_method name="preonly"/>
          <preconditioner name="lu">
            <factorization_package name="mumps"/>
          </preconditioner>
          <relative_error>
            <real_value rank="0">1.0e-5</real_value>
          </relative_error>
          <max_iterations>
            <integer_value rank="0">1000</integer_value>
          </max_iterations>
          <remove_null_space/>
          <never_ignore_solver_failures/>
          <diagnostics>
            <monitors/>
          </diagnostics>
        </solver>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
        <no_interpolation/>
      </prognostic>
    </scalar_field>
    <scalar_field rank="0" name="Latent_Heating">
      <diagnostic>
        <algorithm name="from_particles" material_phase_support="multiple">
          <particle_group name="Melt">
            <particle_attribute_array name="Katz">
              <attribute_index>
                <integer_value rank="0">6</integer_value>
              </attribute_index>
            </particle_attribute_array>
          </particle_group>
          <interpolation>
            <weighted_distance/>
          </interpolation>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
        <consistent_interpolation/>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ViscosityDiffusionCreep">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">import numpy
import math
import constants

T = state.scalar_fields["Temperature"]
X = state.vector_fields["Coordinate"]

assert(T.node_count == field.node_count)
assert(X.node_count == field.node_count)

R = constants.gas_constant
g = constants.g
rho = constants.rho0

UM_gradient = constants.adGra * 1000.

for i in range(field.node_count):
        z=constants.box_depth-X.node_val(i)[1]
        temp = T.node_val(i)
        # Linear adiabatic temperature profile of 0.5 K/km in UM
        temp = temp + UM_gradient*(z/1.0e3)
        P=rho*g*z
        mu_diff = constants.Adiff_UM**(-1.0)*math.exp((constants.Ediff_UM+P*constants.Vdiff_UM)/(R*temp))
        field.set(i,mu_diff)</string_value>
          <depends>
            <string_value lines="1">Temperature</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="ViscosityDislocationCreep">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">import numpy
import math
import constants

T = state.scalar_fields["Temperature"]
X = state.vector_fields["Coordinate"]
S = state.scalar_fields["StrainRateSecondInvariant"]

assert(T.node_count == field.node_count)
assert(S.node_count == field.node_count)
assert(X.node_count == field.node_count)

R = constants.gas_constant
g = constants.g
rho = constants.rho0

UM_gradient = constants.adGra * 1000.
n = constants.n

for i in range(field.node_count):
        z=constants.box_depth-X.node_val(i)[1]
        temp = T.node_val(i)
        # Linear adiabatic temperature profile of 0.5 K/km
        temp = temp + UM_gradient*(z/1.0e3)	
        epsilon_dot = max(1e-25,S.node_val(i))
        P=rho*g*z                          
        mu_disl = constants.Adisl_UM**(-1.0/n)*epsilon_dot**((1.0-n)/n)*math.exp((constants.Edisl_UM+P*constants.Vdisl_UM)/(n*R*temp))
        field.set(i,mu_disl)</string_value>
          <depends>
            <string_value lines="1">Temperature,  StrainRateSecondInvariant</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <exclude_from_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="DeformationMechanism">
      <diagnostic>
        <algorithm name="scalar_python_diagnostic" material_phase_support="single">
          <string_value type="code" language="python" lines="20">import numpy
import math
import constants

Mu_diff = state.scalar_fields["ViscosityDiffusionCreep"]
Mu_disl = state.scalar_fields["ViscosityDislocationCreep"]

assert(Mu_diff.node_count == field.node_count)
assert(Mu_disl.node_count == field.node_count)

mu_max = constants.mu_max
mu_min = constants.mu_min

for i in range(field.node_count):
        mu_diff = min(1e30,Mu_diff.node_val(i)) 
        mu_disl = min(1e30,Mu_disl.node_val(i))
        mu      = (1.0/mu_diff+1.0/mu_disl)**(-1.0)
        mu      = min(mu,mu_max)
        mu      = max(mu,mu_min)
        if (mu &gt; mu_min) and (mu &lt; mu_max):
          if (min(mu_diff,mu_disl) == mu_diff):
            min_mu = 0.0
          elif (min(mu_diff,mu_disl) == mu_disl):
            min_mu = 1.0
        elif (mu ==  mu_min):
          min_mu = 2.0
        else:
          min_mu = 3.0
        field.set(i,min_mu)</string_value>
          <depends>
            <string_value lines="1">ViscosityDiffusionCreep, ViscosityDislocationCreep</string_value>
          </depends>
        </algorithm>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <scalar_field rank="0" name="StrainRateSecondInvariant">
      <diagnostic>
        <algorithm name="strain_rate_second_invariant" material_phase_support="single "/>
        <mesh name="CoordinateMesh"/>
        <output/>
        <stat/>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <exclude_from_steady_state/>
        </steady_state>
      </diagnostic>
    </scalar_field>
    <vector_field rank="1" name="DiagnosticCoordinate">
      <diagnostic>
        <algorithm name="Internal" material_phase_support="multiple"/>
        <mesh name="VelocityMesh"/>
        <output>
          <exclude_from_vtu/>
        </output>
        <stat>
          <include_in_stat/>
        </stat>
        <convergence>
          <include_in_convergence/>
        </convergence>
        <detectors>
          <include_in_detectors/>
        </detectors>
        <particles>
          <exclude_from_particles/>
        </particles>
        <steady_state>
          <include_in_steady_state/>
        </steady_state>
      </diagnostic>
    </vector_field>
  </material_phase>
  <mesh_adaptivity>
    <hr_adaptivity>
      <period_in_timesteps>
        <integer_value rank="0">10</integer_value>
      </period_in_timesteps>
      <maximum_number_of_nodes>
        <integer_value rank="0">10000000</integer_value>
      </maximum_number_of_nodes>
      <enable_gradation>
        <gradation_parameter>
          <real_value rank="0">1.2</real_value>
        </gradation_parameter>
      </enable_gradation>
      <metric_advection>
        <spatial_discretisation>
          <control_volumes>
            <face_value name="FirstOrderUpwind"/>
          </control_volumes>
          <conservative_advection>
            <real_value rank="0">0.0</real_value>
          </conservative_advection>
        </spatial_discretisation>
        <temporal_discretisation>
          <theta>
            <real_value rank="0">0.0</real_value>
          </theta>
          <maximum_courant_number_per_subcycle>
            <real_value rank="0">0.25</real_value>
            <courant_number name="ControlVolumeCFLNumber"/>
          </maximum_courant_number_per_subcycle>
          <scale_advection_time>
            <real_value rank="0">5.0</real_value>
          </scale_advection_time>
          <control_volumes/>
        </temporal_discretisation>
        <explicit/>
        <output/>
      </metric_advection>
      <tensor_field name="MinimumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="2 2">5.0e2 0.0 0.0 5.0e2</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <tensor_field name="MaximumEdgeLengths">
        <anisotropic_symmetric>
          <constant>
            <real_value symmetric="true" rank="2" dim1="dim" dim2="dim" shape="2 2">500e3 0.0 0.0 500e3</real_value>
          </constant>
        </anisotropic_symmetric>
      </tensor_field>
      <aspect_ratio_bound>
        <real_value rank="0">10</real_value>
      </aspect_ratio_bound>
      <adapt_at_first_timestep>
        <number_of_adapts>
          <integer_value rank="0">3</integer_value>
        </number_of_adapts>
      </adapt_at_first_timestep>
      <zoltan_options>
        <partitioner>
          <scotch/>
        </partitioner>
        <final_partitioner>
          <scotch/>
        </final_partitioner>
        <element_quality_cutoff>
          <real_value rank="0">0.5</real_value>
        </element_quality_cutoff>
        <additional_adapt_iterations>
          <integer_value rank="0">5</integer_value>
        </additional_adapt_iterations>
      </zoltan_options>
      <adapt_iterations>
        <integer_value rank="0">5</integer_value>
      </adapt_iterations>
    </hr_adaptivity>
  </mesh_adaptivity>
  <flredecomp>
    <final_partitioner>
      <scotch/>
    </final_partitioner>
  </flredecomp>
</fluidity_options>
